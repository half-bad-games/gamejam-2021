Index: Assets/Scripts/player_movement.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\nusing UnityEngine.SceneManagement;\r\n\r\npublic class player_movement : MonoBehaviour\r\n{\r\n    // Bullet variables\r\n    public float bulletHspeed;\r\n    public float bulletVspeed;\r\n    public float hspeed;\r\n    public float vspeed;\r\n    public float bullet_speed;\r\n    public float walking_speed;\r\n    public float rpm;\r\n    public int weaponSpread;\r\n    public enum weaponTypes { Gun, Shotgun, Machinegun };\r\n    public int currentWeapon;\r\n    public float bulletSync;\r\n    public bool isFiring;\r\n    public bool sprint;\r\n    public bool run;\r\n    public int rngX;\r\n    public int rngZ;\r\n    public int spawnRate;\r\n    public float health;\r\n    public float knockBack_hspeed;\r\n    public float knockBack_vspeed;\r\n    public bool potatoe_mode;\r\n\r\n    // Enemy\r\n    public float timer;\r\n    public float spawnTimer;\r\n    public GameObject enemy;\r\n    private GameObject newEnemy;\r\n\r\n    // variable to hold a reference to our SpriteRenderer component\r\n    public Rigidbody rb;\r\n    public Animator anim;\r\n\r\n    public Timer_Script timer_script;\r\n\r\n    // Start is called before the first frame update\r\n    void Start()\r\n    {\r\n        bulletHspeed = 1.0f;\r\n        bulletVspeed = 0.0f;\r\n        bullet_speed = 0.0f;\r\n        walking_speed = 100.0f;\r\n        knockBack_hspeed = 0;\r\n        knockBack_vspeed = 0;\r\n        health = 100;\r\n        rpm = 0.0f;\r\n        bulletSync = 0.0f;\r\n        weaponSpread = 0;\r\n        isFiring = false;\r\n        run = false;\r\n        currentWeapon = (int)weaponTypes.Gun;\r\n        rb = GetComponent<Rigidbody>();\r\n\r\n        enemy = GameObject.Find(\"enemy\");\r\n        timer = 0.0f;\r\n        spawnRate = 2;\r\n\r\n        // timer_script = GameObject.Find(\"Timer\").GetComponent<Timer_Script>();\r\n    }\r\n\r\n    // Update is called once per frame\r\n    void FixedUpdate()\r\n    {\r\n        // ############### Player Movement ###############\r\n           float h = Input.GetAxis(\"Horizontal\");\r\n           float v = Input.GetAxis(\"Vertical\");\r\n\r\n        \r\n        hspeed = walking_speed * h + knockBack_hspeed;\r\n        vspeed = walking_speed * v + knockBack_vspeed;\r\n\r\n\r\n        float tmpPushBackTime = 20;\r\n        if (knockBack_hspeed > 0)\r\n            knockBack_hspeed -= knockBack_hspeed / tmpPushBackTime;\r\n\r\n        if (knockBack_hspeed < 0)\r\n            knockBack_hspeed += -knockBack_hspeed / tmpPushBackTime;\r\n\r\n        if (knockBack_vspeed > 0)\r\n            knockBack_vspeed -= knockBack_vspeed / tmpPushBackTime;\r\n\r\n        if (knockBack_vspeed < 0)\r\n            knockBack_vspeed += -knockBack_vspeed / tmpPushBackTime;\r\n\r\n        // ############### Player Movement ###############\r\n\r\n        // ############### Player Animations 1 ###############\r\n        anim.SetFloat(\"run\", Mathf.Abs(h) + Mathf.Abs(v));\r\n        //anim.SetBool(\"sprint\", sprint);\r\n        // ############### Player Animations 1 ###############\r\n\r\n\r\n        // ############### Weapon Controls ###############\r\n        if (sprint == false)\r\n        {\r\n            if (Input.GetKey(KeyCode.RightArrow))\r\n            {\r\n                bulletHspeed = hspeed * Time.deltaTime + bullet_speed;\r\n                isFiring = true;\r\n            }\r\n            if (Input.GetKey(KeyCode.LeftArrow))\r\n            {\r\n                bulletHspeed = hspeed * Time.deltaTime - bullet_speed;\r\n                isFiring = true;\r\n            }\r\n\r\n            if (Input.GetKey(KeyCode.UpArrow) && (Input.GetKey(KeyCode.LeftArrow) || Input.GetKey(KeyCode.RightArrow)))\r\n            {\r\n\r\n                bulletVspeed = vspeed * Time.deltaTime + bullet_speed;\r\n                isFiring = true;\r\n            }\r\n            if (Input.GetKey(KeyCode.DownArrow) && (Input.GetKey(KeyCode.LeftArrow) || Input.GetKey(KeyCode.RightArrow)))\r\n            {\r\n                bulletVspeed = vspeed * Time.deltaTime - bullet_speed;\r\n                isFiring = true;\r\n            }\r\n\r\n            if ((!Input.GetKey(KeyCode.RightArrow)) && (!Input.GetKey(KeyCode.LeftArrow)))\r\n            {\r\n                bulletHspeed = hspeed * Time.deltaTime;\r\n            }\r\n            if ((!Input.GetKey(KeyCode.UpArrow)) && (!Input.GetKey(KeyCode.DownArrow)))\r\n            {\r\n                bulletVspeed = vspeed * Time.deltaTime;\r\n            }\r\n\r\n            if (bulletSync > rpm)\r\n            {\r\n                isFiring = false;\r\n                bulletSync = 0.0f;\r\n            }\r\n\r\n            if (bulletSync == 0f)\r\n            {\r\n                if ((Input.GetKey(KeyCode.RightArrow)) || (Input.GetKey(KeyCode.LeftArrow)) || (Input.GetKey(KeyCode.UpArrow)) || (Input.GetKey(KeyCode.DownArrow)))\r\n                {\r\n                    bulletHspeed = bulletHspeed * Time.deltaTime;\r\n                    bulletVspeed = bulletVspeed * Time.deltaTime;\r\n\r\n                    if (isFiring)\r\n                    {\r\n                        if (getCurrentWeapon() == 1)\r\n                        {\r\n                            health -= 2;\r\n                        }\r\n                        else\r\n                        {\r\n                            health -= 4f;\r\n                        }\r\n\r\n                        if (currentWeapon == 1)\r\n                        {\r\n                            for (int i = 0; i < weaponSpread; i++)\r\n                            {\r\n\r\n                                GameObject newBullet = Instantiate(GameObject.Find(\"Bullet\"));\r\n                                if (i == 0)\r\n                                    newBullet.transform.position = new Vector3(transform.position.x, transform.position.y, transform.position.z + 1);\r\n                                else if (i == 1)\r\n                                    newBullet.transform.position = new Vector3(transform.position.x + Random.Range(1, 3), transform.position.y + Random.Range(1, 3), transform.position.z + Random.Range(1, 10));\r\n                                else if (i == 2)\r\n                                    newBullet.transform.position = new Vector3(transform.position.x + Random.Range(1, 3), transform.position.y + Random.Range(1, 3), transform.position.z + Random.Range(1, 10));\r\n                                else if (i == 3)\r\n                                    newBullet.transform.position = new Vector3(transform.position.x + Random.Range(1, 3), transform.position.y + Random.Range(1, 3), transform.position.z + Random.Range(1, 10));\r\n                                else if (i == 4)\r\n                                    newBullet.transform.position = new Vector3(transform.position.x + Random.Range(1, 3), transform.position.y + Random.Range(1, 3), transform.position.z + Random.Range(1, 10));\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            GameObject newBullet = Instantiate(GameObject.Find(\"Bullet\"));\r\n                            newBullet.transform.position = new Vector3(transform.position.x, transform.position.y, transform.position.z + 1);\r\n                        }\r\n                    }\r\n                }\r\n                bulletSync = 0.0f;\r\n            }\r\n\r\n            // Wait time\r\n            if (isFiring)\r\n                bulletSync += Time.deltaTime;\r\n\r\n        }\r\n        // ############### Weapon Controls ###############\r\n\r\n        // ############### Player Collision ###############\r\n        if (Input.GetKeyDown(KeyCode.LeftArrow))\r\n        {\r\n            GameObject.Find(\"player_flip_channel\").transform.localScale = new Vector3(1, 1, 1);\r\n        }\r\n\r\n        if (Input.GetKeyDown(KeyCode.RightArrow))\r\n        {\r\n            GameObject.Find(\"player_flip_channel\").transform.localScale = new Vector3(-1, 1, 1);\r\n        }\r\n        // ############### Player Collision ###############\r\n\r\n\r\n        // ############### Player Sprint ###############\r\n        if (potatoe_mode == false)\r\n        {\r\n            if (Input.GetKey(KeyCode.LeftShift))\r\n            {\r\n                GameObject.Find(\"Body\").GetComponent<SpriteRenderer>().flipX = true;\r\n                GameObject.Find(\"Hat\").GetComponent<SpriteRenderer>().flipX = false;\r\n                GameObject.Find(\"Right Arm\").GetComponent<SpriteRenderer>().flipX = true;\r\n                GameObject.Find(\"Left Arm\").GetComponent<SpriteRenderer>().flipX = true;\r\n                GameObject.Find(\"Right Leg\").GetComponent<SpriteRenderer>().flipX = true;\r\n                GameObject.Find(\"Left Leg\").GetComponent<SpriteRenderer>().flipX = true;\r\n                GameObject.Find(\"spud_shotgun\").GetComponent<SpriteRenderer>().enabled = false;\r\n\r\n                if ((Input.GetKey(KeyCode.A)) && (sprint))\r\n                {\r\n                    GameObject.Find(\"player_flip_channel\").transform.localScale = new Vector3(1, 1, 1);\r\n                }\r\n\r\n                if ((Input.GetKey(KeyCode.D)) && (sprint))\r\n                {\r\n                    GameObject.Find(\"player_flip_channel\").transform.localScale = new Vector3(-1, 1, 1);\r\n                }\r\n\r\n                sprint = true;\r\n                walking_speed = 100f;\r\n            }\r\n            else\r\n            {\r\n                GameObject.Find(\"Body\").GetComponent<SpriteRenderer>().flipX = false;\r\n                GameObject.Find(\"Hat\").GetComponent<SpriteRenderer>().flipX = false;\r\n                GameObject.Find(\"Right Arm\").GetComponent<SpriteRenderer>().flipX = false;\r\n                GameObject.Find(\"Left Arm\").GetComponent<SpriteRenderer>().flipX = false;\r\n                GameObject.Find(\"Right Leg\").GetComponent<SpriteRenderer>().flipX = false;\r\n                GameObject.Find(\"Left Leg\").GetComponent<SpriteRenderer>().flipX = false;\r\n                GameObject.Find(\"spud_shotgun\").GetComponent<SpriteRenderer>().enabled = true;\r\n\r\n                sprint = false;\r\n                walking_speed = 60f;\r\n            }\r\n        }\r\n        // ############### Player Sprint ###############\r\n\r\n        if (health > 100)\r\n            health = 100;\r\n\r\n        // ############### Player PLANT ###############\r\n        if ((Input.GetKey(KeyCode.Space)) || (Input.GetKey(KeyCode.LeftControl)) || (Input.GetKey(KeyCode.RightControl)))\r\n        {\r\n            sprint = false;\r\n            potatoe_mode = true;\r\n            GameObject.Find(\"Body\").GetComponent<SpriteRenderer>().enabled = false;\r\n            GameObject.Find(\"Hat\").GetComponent<SpriteRenderer>().enabled = false;\r\n            GameObject.Find(\"Right Arm\").GetComponent<SpriteRenderer>().enabled = false;\r\n            GameObject.Find(\"Left Arm\").GetComponent<SpriteRenderer>().enabled = false;\r\n            GameObject.Find(\"Right Leg\").GetComponent<SpriteRenderer>().enabled = false;\r\n            GameObject.Find(\"Left Leg\").GetComponent<SpriteRenderer>().enabled = false;\r\n            GameObject.Find(\"spud_shotgun\").GetComponent<SpriteRenderer>().enabled = false;\r\n            GameObject.Find(\"TurretFront\").GetComponent<SpriteRenderer>().enabled = true;\r\n            health += Time.deltaTime * 5;\r\n            setCurrentWeapon(0);\r\n            walking_speed = 10f;\r\n            setBulletSpeed(150.0f);\r\n            setRpm(0.1f);\r\n            setWeaponSpread(1);\r\n\r\n\r\n        }\r\n        else\r\n        {\r\n            potatoe_mode = false;\r\n            GameObject.Find(\"Body\").GetComponent<SpriteRenderer>().enabled = true;\r\n            GameObject.Find(\"Hat\").GetComponent<SpriteRenderer>().enabled = true;\r\n            GameObject.Find(\"Right Arm\").GetComponent<SpriteRenderer>().enabled = true;\r\n            GameObject.Find(\"Left Arm\").GetComponent<SpriteRenderer>().enabled = true;\r\n            GameObject.Find(\"Right Leg\").GetComponent<SpriteRenderer>().enabled = true;\r\n            GameObject.Find(\"Left Leg\").GetComponent<SpriteRenderer>().enabled = true;\r\n            GameObject.Find(\"TurretFront\").GetComponent<SpriteRenderer>().enabled = false;\r\n            setCurrentWeapon(1);\r\n            setBulletSpeed(150.0f);\r\n            setRpm(0.8f);\r\n            setWeaponSpread(5);\r\n        }\r\n        // ############### Player PLANT ###############\r\n\r\n        // ############### Player Layering ###############\r\n        GameObject.Find(\"Body\").GetComponent<SpriteRenderer>().sortingOrder = -(int)transform.position.z;\r\n        GameObject.Find(\"Hat\").GetComponent<SpriteRenderer>().sortingOrder = -(int)transform.position.z - 1;\r\n        GameObject.Find(\"Right Arm\").GetComponent<SpriteRenderer>().sortingOrder = -(int)transform.position.z + 1;\r\n        GameObject.Find(\"Left Arm\").GetComponent<SpriteRenderer>().sortingOrder = -(int)transform.position.z - 1;\r\n        GameObject.Find(\"Right Leg\").GetComponent<SpriteRenderer>().sortingOrder = -(int)transform.position.z + 1;\r\n        GameObject.Find(\"Left Leg\").GetComponent<SpriteRenderer>().sortingOrder = -(int)transform.position.z - 1;\r\n        GameObject.Find(\"spud_shotgun\").GetComponent<SpriteRenderer>().sortingOrder = -(int)transform.position.z + 1;\r\n        GameObject.Find(\"TurretFront\").GetComponent<SpriteRenderer>().sortingOrder = -(int)transform.position.z;\r\n\r\n        rb.velocity = new Vector3(hspeed, 0, vspeed);\r\n        // ############### Player Layering ###############\r\n\r\n        // ############### Generate Enemy ###############\r\n        timer += Time.deltaTime;\r\n        rngX = Random.Range(-500, -300);\r\n        rngZ = Random.Range(-500, -300);\r\n\r\n        if (timer > 1.0f + spawnTimer)\r\n        {\r\n            for (int i = 0; i < spawnRate; i++)\r\n            {\r\n                switch (i)\r\n                {\r\n                    case 0:\r\n                        break;\r\n                    case 1:\r\n                        rngX = Mathf.Abs(rngX);\r\n                        rngZ = Mathf.Abs(rngZ);\r\n                        break;\r\n                    case 2:\r\n                        rngX = Mathf.Abs(rngX);\r\n                        break;\r\n                    case 3:\r\n                        rngZ = Mathf.Abs(rngZ);\r\n                        break;\r\n                    case 4:\r\n                        break;\r\n                }\r\n\r\n                newEnemy = Instantiate(enemy) as GameObject;\r\n                newEnemy.transform.position = new Vector3(transform.position.x + Random.Range(rngX, rngX / 2), 18, transform.position.z + Random.Range(rngZ, rngZ / 2));\r\n            }\r\n\r\n            timer = 0.0f;\r\n            if (spawnTimer < 6.50f)\r\n                setSpawnTimer(spawnTimer + 0.25f);\r\n\r\n            if (spawnTimer > 3.0f && spawnTimer < 5.0f)\r\n                setSpawnRate(3);\r\n            else if (spawnTimer > 5.25f && spawnTimer < 6.0f)\r\n                setSpawnRate(4);\r\n            else if (spawnTimer > 6.25f)\r\n                setSpawnRate(5);\r\n        }\r\n        // ############### Generate Enemy ###############\r\n\r\n        // health\r\n        GameObject.Find(\"HEALTH\").GetComponent<UnityEngine.UI.Text>().text = ((int)health).ToString();\r\n\r\n        if (health <= 0)\r\n        {\r\n            SceneManager.LoadScene(\"GameOverScene\", LoadSceneMode.Single);\r\n            // timer_script.setMinuteCountSaved(timer_script.getMinuteCount());\r\n            // timer_script.setSecoundCountSaved(timer_script.getSecoundCount());\r\n            // timer_script.setMinuteCount(0);\r\n            // timer_script.setSecoundCount(0.0f);\r\n        }\r\n\r\n    }\r\n    public int getCurrentWeapon() { return currentWeapon; }\r\n    public void setCurrentWeapon(int aCurrentWeapon) { currentWeapon = aCurrentWeapon; }\r\n\r\n    public float getBulletSpeed() { return bullet_speed; }\r\n    public void setBulletSpeed(float aBulletSpeed) { bullet_speed = aBulletSpeed; }\r\n\r\n    public float getRpm() { return rpm; }\r\n    public void setRpm(float aRpm) { rpm = aRpm; }\r\n\r\n    public float getWeaponSpread() { return weaponSpread; }\r\n    public void setWeaponSpread(int aWeaponSpread) { weaponSpread = aWeaponSpread; }\r\n\r\n    public int getSpawnRate() { return spawnRate; }\r\n    public void setSpawnRate(int aSpawnRate) { spawnRate = aSpawnRate; }\r\n\r\n    public float getSpawnTimer() { return spawnTimer; }\r\n    public void setSpawnTimer(float aSpawnTimer) { spawnTimer = aSpawnTimer; }\r\n\r\n    void OnCollisionEnter(Collision collision)\r\n    {\r\n        if (collision.gameObject.name == \"enemy(Clone)\")\r\n        {\r\n            health -= 15;\r\n            knockBack_hspeed = GameObject.Find(\"enemy(Clone)\").GetComponent<enemy_script>().hspeed * 4;\r\n            knockBack_vspeed = GameObject.Find(\"enemy(Clone)\").GetComponent<enemy_script>().vspeed * 4;\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Scripts/player_movement.cs b/Assets/Scripts/player_movement.cs
--- a/Assets/Scripts/player_movement.cs	(revision d58c37ccdbdfafae17285a800a929a9f5692d5a1)
+++ b/Assets/Scripts/player_movement.cs	(date 1631315964231)
@@ -329,8 +329,8 @@
                         break;
                 }
 
-                newEnemy = Instantiate(enemy) as GameObject;
-                newEnemy.transform.position = new Vector3(transform.position.x + Random.Range(rngX, rngX / 2), 18, transform.position.z + Random.Range(rngZ, rngZ / 2));
+                // newEnemy = Instantiate(enemy) as GameObject;
+                // newEnemy.transform.position = new Vector3(transform.position.x + Random.Range(rngX, rngX / 2), 18, transform.position.z + Random.Range(rngZ, rngZ / 2));
             }
 
             timer = 0.0f;
Index: ProjectSettings/ProjectVersion.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>m_EditorVersion: 2020.3.18f1\nm_EditorVersionWithRevision: 2020.3.18f1 (a7d1c678663c)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ProjectSettings/ProjectVersion.txt b/ProjectSettings/ProjectVersion.txt
--- a/ProjectSettings/ProjectVersion.txt	(revision d58c37ccdbdfafae17285a800a929a9f5692d5a1)
+++ b/ProjectSettings/ProjectVersion.txt	(date 1631315736887)
@@ -1,2 +1,2 @@
-m_EditorVersion: 2020.3.18f1
-m_EditorVersionWithRevision: 2020.3.18f1 (a7d1c678663c)
+m_EditorVersion: 2021.1.2f1
+m_EditorVersionWithRevision: 2021.1.2f1 (e5d502d80fbb)
Index: Packages/manifest.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"dependencies\": {\n    \"com.unity.2d.sprite\": \"1.0.0\",\n    \"com.unity.collab-proxy\": \"1.9.0\",\n    \"com.unity.ext.nunit\": \"1.0.6\",\n    \"com.unity.ide.rider\": \"2.0.7\",\n    \"com.unity.ide.visualstudio\": \"2.0.11\",\n    \"com.unity.ide.vscode\": \"1.2.3\",\n    \"com.unity.test-framework\": \"1.1.29\",\n    \"com.unity.textmeshpro\": \"3.0.6\",\n    \"com.unity.timeline\": \"1.4.8\",\n    \"com.unity.toolchain.linux-x86_64\": \"0.1.19-preview\",\n    \"com.unity.ugui\": \"1.0.0\",\n    \"com.unity.modules.ai\": \"1.0.0\",\n    \"com.unity.modules.androidjni\": \"1.0.0\",\n    \"com.unity.modules.animation\": \"1.0.0\",\n    \"com.unity.modules.assetbundle\": \"1.0.0\",\n    \"com.unity.modules.audio\": \"1.0.0\",\n    \"com.unity.modules.cloth\": \"1.0.0\",\n    \"com.unity.modules.director\": \"1.0.0\",\n    \"com.unity.modules.imageconversion\": \"1.0.0\",\n    \"com.unity.modules.imgui\": \"1.0.0\",\n    \"com.unity.modules.jsonserialize\": \"1.0.0\",\n    \"com.unity.modules.particlesystem\": \"1.0.0\",\n    \"com.unity.modules.physics\": \"1.0.0\",\n    \"com.unity.modules.physics2d\": \"1.0.0\",\n    \"com.unity.modules.screencapture\": \"1.0.0\",\n    \"com.unity.modules.terrain\": \"1.0.0\",\n    \"com.unity.modules.terrainphysics\": \"1.0.0\",\n    \"com.unity.modules.tilemap\": \"1.0.0\",\n    \"com.unity.modules.ui\": \"1.0.0\",\n    \"com.unity.modules.uielements\": \"1.0.0\",\n    \"com.unity.modules.umbra\": \"1.0.0\",\n    \"com.unity.modules.unityanalytics\": \"1.0.0\",\n    \"com.unity.modules.unitywebrequest\": \"1.0.0\",\n    \"com.unity.modules.unitywebrequestassetbundle\": \"1.0.0\",\n    \"com.unity.modules.unitywebrequestaudio\": \"1.0.0\",\n    \"com.unity.modules.unitywebrequesttexture\": \"1.0.0\",\n    \"com.unity.modules.unitywebrequestwww\": \"1.0.0\",\n    \"com.unity.modules.vehicles\": \"1.0.0\",\n    \"com.unity.modules.video\": \"1.0.0\",\n    \"com.unity.modules.vr\": \"1.0.0\",\n    \"com.unity.modules.wind\": \"1.0.0\",\n    \"com.unity.modules.xr\": \"1.0.0\"\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Packages/manifest.json b/Packages/manifest.json
--- a/Packages/manifest.json	(revision d58c37ccdbdfafae17285a800a929a9f5692d5a1)
+++ b/Packages/manifest.json	(date 1631315711424)
@@ -3,12 +3,12 @@
     "com.unity.2d.sprite": "1.0.0",
     "com.unity.collab-proxy": "1.9.0",
     "com.unity.ext.nunit": "1.0.6",
-    "com.unity.ide.rider": "2.0.7",
+    "com.unity.ide.rider": "3.0.5",
     "com.unity.ide.visualstudio": "2.0.11",
     "com.unity.ide.vscode": "1.2.3",
     "com.unity.test-framework": "1.1.29",
     "com.unity.textmeshpro": "3.0.6",
-    "com.unity.timeline": "1.4.8",
+    "com.unity.timeline": "1.5.4",
     "com.unity.toolchain.linux-x86_64": "0.1.19-preview",
     "com.unity.ugui": "1.0.0",
     "com.unity.modules.ai": "1.0.0",
Index: Packages/packages-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"dependencies\": {\n    \"com.unity.2d.sprite\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.collab-proxy\": {\n      \"version\": \"1.9.0\",\n      \"depth\": 0,\n      \"source\": \"registry\",\n      \"dependencies\": {},\n      \"url\": \"https://packages.unity.com\"\n    },\n    \"com.unity.ext.nunit\": {\n      \"version\": \"1.0.6\",\n      \"depth\": 0,\n      \"source\": \"registry\",\n      \"dependencies\": {},\n      \"url\": \"https://packages.unity.com\"\n    },\n    \"com.unity.ide.rider\": {\n      \"version\": \"2.0.7\",\n      \"depth\": 0,\n      \"source\": \"registry\",\n      \"dependencies\": {\n        \"com.unity.test-framework\": \"1.1.1\"\n      },\n      \"url\": \"https://packages.unity.com\"\n    },\n    \"com.unity.ide.visualstudio\": {\n      \"version\": \"2.0.11\",\n      \"depth\": 0,\n      \"source\": \"registry\",\n      \"dependencies\": {\n        \"com.unity.test-framework\": \"1.1.9\"\n      },\n      \"url\": \"https://packages.unity.com\"\n    },\n    \"com.unity.ide.vscode\": {\n      \"version\": \"1.2.3\",\n      \"depth\": 0,\n      \"source\": \"registry\",\n      \"dependencies\": {},\n      \"url\": \"https://packages.unity.com\"\n    },\n    \"com.unity.sysroot\": {\n      \"version\": \"0.1.19-preview\",\n      \"depth\": 1,\n      \"source\": \"registry\",\n      \"dependencies\": {},\n      \"url\": \"https://packages.unity.com\"\n    },\n    \"com.unity.sysroot.linux-x86_64\": {\n      \"version\": \"0.1.14-preview\",\n      \"depth\": 1,\n      \"source\": \"registry\",\n      \"dependencies\": {\n        \"com.unity.sysroot\": \"0.1.18-preview\"\n      },\n      \"url\": \"https://packages.unity.com\"\n    },\n    \"com.unity.test-framework\": {\n      \"version\": \"1.1.29\",\n      \"depth\": 0,\n      \"source\": \"registry\",\n      \"dependencies\": {\n        \"com.unity.ext.nunit\": \"1.0.6\",\n        \"com.unity.modules.imgui\": \"1.0.0\",\n        \"com.unity.modules.jsonserialize\": \"1.0.0\"\n      },\n      \"url\": \"https://packages.unity.com\"\n    },\n    \"com.unity.textmeshpro\": {\n      \"version\": \"3.0.6\",\n      \"depth\": 0,\n      \"source\": \"registry\",\n      \"dependencies\": {\n        \"com.unity.ugui\": \"1.0.0\"\n      },\n      \"url\": \"https://packages.unity.com\"\n    },\n    \"com.unity.timeline\": {\n      \"version\": \"1.4.8\",\n      \"depth\": 0,\n      \"source\": \"registry\",\n      \"dependencies\": {\n        \"com.unity.modules.director\": \"1.0.0\",\n        \"com.unity.modules.animation\": \"1.0.0\",\n        \"com.unity.modules.audio\": \"1.0.0\",\n        \"com.unity.modules.particlesystem\": \"1.0.0\"\n      },\n      \"url\": \"https://packages.unity.com\"\n    },\n    \"com.unity.toolchain.linux-x86_64\": {\n      \"version\": \"0.1.19-preview\",\n      \"depth\": 0,\n      \"source\": \"registry\",\n      \"dependencies\": {\n        \"com.unity.sysroot\": \"0.1.19-preview\",\n        \"com.unity.sysroot.linux-x86_64\": \"0.1.14-preview\"\n      },\n      \"url\": \"https://packages.unity.com\"\n    },\n    \"com.unity.ugui\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.ui\": \"1.0.0\",\n        \"com.unity.modules.imgui\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.ai\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.androidjni\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.animation\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.assetbundle\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.audio\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.cloth\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.physics\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.director\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.audio\": \"1.0.0\",\n        \"com.unity.modules.animation\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.imageconversion\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.imgui\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.jsonserialize\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.particlesystem\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.physics\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.physics2d\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.screencapture\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.imageconversion\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.subsystems\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 1,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.jsonserialize\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.terrain\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.terrainphysics\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.physics\": \"1.0.0\",\n        \"com.unity.modules.terrain\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.tilemap\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.physics2d\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.ui\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.uielements\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.ui\": \"1.0.0\",\n        \"com.unity.modules.imgui\": \"1.0.0\",\n        \"com.unity.modules.jsonserialize\": \"1.0.0\",\n        \"com.unity.modules.uielementsnative\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.uielementsnative\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 1,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.ui\": \"1.0.0\",\n        \"com.unity.modules.imgui\": \"1.0.0\",\n        \"com.unity.modules.jsonserialize\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.umbra\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.unityanalytics\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.unitywebrequest\": \"1.0.0\",\n        \"com.unity.modules.jsonserialize\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.unitywebrequest\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.unitywebrequestassetbundle\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.assetbundle\": \"1.0.0\",\n        \"com.unity.modules.unitywebrequest\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.unitywebrequestaudio\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.unitywebrequest\": \"1.0.0\",\n        \"com.unity.modules.audio\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.unitywebrequesttexture\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.unitywebrequest\": \"1.0.0\",\n        \"com.unity.modules.imageconversion\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.unitywebrequestwww\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.unitywebrequest\": \"1.0.0\",\n        \"com.unity.modules.unitywebrequestassetbundle\": \"1.0.0\",\n        \"com.unity.modules.unitywebrequestaudio\": \"1.0.0\",\n        \"com.unity.modules.audio\": \"1.0.0\",\n        \"com.unity.modules.assetbundle\": \"1.0.0\",\n        \"com.unity.modules.imageconversion\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.vehicles\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.physics\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.video\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.audio\": \"1.0.0\",\n        \"com.unity.modules.ui\": \"1.0.0\",\n        \"com.unity.modules.unitywebrequest\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.vr\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.jsonserialize\": \"1.0.0\",\n        \"com.unity.modules.physics\": \"1.0.0\",\n        \"com.unity.modules.xr\": \"1.0.0\"\n      }\n    },\n    \"com.unity.modules.wind\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {}\n    },\n    \"com.unity.modules.xr\": {\n      \"version\": \"1.0.0\",\n      \"depth\": 0,\n      \"source\": \"builtin\",\n      \"dependencies\": {\n        \"com.unity.modules.physics\": \"1.0.0\",\n        \"com.unity.modules.jsonserialize\": \"1.0.0\",\n        \"com.unity.modules.subsystems\": \"1.0.0\"\n      }\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Packages/packages-lock.json b/Packages/packages-lock.json
--- a/Packages/packages-lock.json	(revision d58c37ccdbdfafae17285a800a929a9f5692d5a1)
+++ b/Packages/packages-lock.json	(date 1631315713232)
@@ -21,12 +21,10 @@
       "url": "https://packages.unity.com"
     },
     "com.unity.ide.rider": {
-      "version": "2.0.7",
+      "version": "3.0.5",
       "depth": 0,
       "source": "registry",
-      "dependencies": {
-        "com.unity.test-framework": "1.1.1"
-      },
+      "dependencies": {},
       "url": "https://packages.unity.com"
     },
     "com.unity.ide.visualstudio": {
@@ -82,7 +80,7 @@
       "url": "https://packages.unity.com"
     },
     "com.unity.timeline": {
-      "version": "1.4.8",
+      "version": "1.5.4",
       "depth": 0,
       "source": "registry",
       "dependencies": {
